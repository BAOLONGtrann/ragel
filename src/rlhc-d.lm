global HasDefault: list<int> = cons list<int>[]

void d_tok_list( TL: host::tok* )
{
	for Tok: host::tok in repeat(TL) {
		if match Tok [host::`${ StmtList: stmt* host::`}$]
			send Output "{[d_stmt_list( StmtList )]}"
		elsif match Tok [host::`={ Expr: expr host::`}=]
			send Output "([d_expr( Expr )])"
		else {
			send Output [Tok]
		}
	}
}

void d_embedded_host( EmbeddedHost: embedded_host )
{
	switch EmbeddedHost
	case [`host `( string `, uint `) `={ TL: host::tok* host::`}=]
	{
		send Output
			"([d_tok_list( TL )])"
	}
	case [`host `( string `, uint `) `${ TL: host::tok* host::`}$]
	{
		send Output 
			"{[d_tok_list( TL )]}
	}
	case [`host `( string `, uint `) `@{ TL: host::tok* host::`}@]
	{
		send Output
			[d_tok_list( TL )]
	}
}

void d_expr_factor( ExprFactor: expr_factor )
{
	if match ExprFactor
		[EH: embedded_host]
	{
		send Output
			[d_embedded_host(EH)]
	}
	elsif match ExprFactor
		[O:`( TL: expr C: `)]
	{
		send Output
			[O d_expr( TL ) C]
	}
	elsif match ExprFactor
		[ident O: `[ TL: expr C: `]]
	{
		send Output
			[ExprFactor.ident O d_expr(TL) C]
	}
	elsif match ExprFactor
		[`offset `( ident `, expr `)]
	{
		send Output
			"& [ExprFactor.ident] \[ [d_expr(ExprFactor.expr)] \]
	}
	elsif match ExprFactor
		[`deref `( ident `, expr `)]
	{
		send Output
			"(*( [d_expr(ExprFactor.expr)] ))
	}
	elsif match ExprFactor
			[T: `TRUE]
	{
		T.data = '1'
		send Output [T]
	}
	elsif match ExprFactor
			[F: `FALSE]
	{
		F.data = '0'
		send Output [F]
	}
	elsif match ExprFactor
			[N: `nil]
	{
		N.data = 'null'
		send Output [N]
	}
	elsif match ExprFactor
			[Number: number]
	{
		d_number( Number )
	}
	elsif match ExprFactor [E1: embedded_host `-> E2: expr_factor]
	{
		d_embedded_host( E1 )
		d_expr_factor( E2 )
	}
	elsif match ExprFactor [Open: `( Type: type Close: `) expr_factor]
	{
		send Output ['cast' Open]
		d_type( Type )
		send Output [Close]
		d_expr_factor( ExprFactor._expr_factor )
	}
	else {
		# Catches cases not specified
		send Output [ExprFactor]
	}
}

void d_expr_factor2( ExprFactor: expr_factor2 )
{
	if match ExprFactor
		[EH: embedded_host]
	{
		send Output
			[d_embedded_host(EH)]
	}
	elsif match ExprFactor
		[O:`( TL: expr C: `)]
	{
		send Output
			[O d_expr( TL ) C]
	}
	elsif match ExprFactor
		[ident O: `[ TL: expr C: `]]
	{
		send Output
			[ExprFactor.ident O d_expr(TL) C]
	}
	elsif match ExprFactor
		[`offset `( ident `, expr `)]
	{
		send Output
			"& [ExprFactor.ident] \[ [d_expr(ExprFactor.expr)] \]
	}
	elsif match ExprFactor
		[`deref `( ident `, expr `)]
	{
		send Output
			"(*( [d_expr(ExprFactor.expr)] ))
	}
	elsif match ExprFactor
			[T: `TRUE]
	{
		T.data = '1'
		send Output [T]
	}
	elsif match ExprFactor
			[F: `FALSE]
	{
		F.data = '0'
		send Output [F]
	}
	elsif match ExprFactor
			[N: `nil]
	{
		N.data = 'null'
		send Output [N]
	}
	elsif match ExprFactor
			[Number: number]
	{
		d_number( Number )
	}
	elsif match ExprFactor [E1: embedded_host `-> E2: expr_factor]
	{
		d_embedded_host( E1 )
		d_expr_factor( E2 )
	}
	elsif match ExprFactor [Open: `( Type: type Close: `) expr_factor]
	{
		send Output ['cast' Open]
		d_type( Type )
		send Output [Close]
		d_expr_factor( ExprFactor.expr_factor )
	}
	else {
		# Catches cases not specified
		send Output [ExprFactor]
	}
}

void d_expr_factor_op( ExprFactorOp: expr_factor_op )
{
	if match ExprFactorOp [B: `! expr_factor_op]
	{
		send Output [B]
		d_expr_factor_op( ExprFactorOp._expr_factor_op )
	}
	elsif match ExprFactorOp [T: `~ expr_factor_op]
	{
		send Output [T]
		d_expr_factor_op( ExprFactorOp._expr_factor_op )
	}
	elsif match ExprFactorOp [expr_factor]
	{
		d_expr_factor( ExprFactorOp.expr_factor )
	}
}

void d_expr_bitwise( ExprBitwise: expr_bitwise )
{
	if match ExprBitwise [expr_bitwise A: `& expr_factor_op]
	{
		d_expr_bitwise( ExprBitwise._expr_bitwise )
		send Output [A]
		d_expr_factor_op( ExprBitwise.expr_factor_op )
	}
	elsif match ExprBitwise [expr_factor_op]
	{
		d_expr_factor_op( ExprBitwise.expr_factor_op )
	}
}

void d_expr_mult( ExprMult: expr_mult )
{
	if match ExprMult [expr_mult T: `* expr_bitwise]
	{
		d_expr_mult( ExprMult._expr_mult )
		send Output [T]
		d_expr_bitwise( ExprMult.expr_bitwise )
	}
	elsif match ExprMult [expr_bitwise]
	{
		d_expr_bitwise( ExprMult.expr_bitwise )
	}
}

void d_expr_add( ExprAdd: expr_add )
{
	if match ExprAdd [expr_add Op: add_op expr_mult]
	{
		d_expr_add( ExprAdd._expr_add )
		send Output [Op]
		d_expr_mult( ExprAdd.expr_mult )
	}
	elsif match ExprAdd [expr_mult]
	{
		d_expr_mult( ExprAdd.expr_mult )
	}
}

void d_expr_shift( ExprShift: expr_shift )
{
	if match ExprShift [expr_shift Op: shift_op expr_add]
	{
		d_expr_shift( ExprShift._expr_shift )
		send Output [Op]
		d_expr_add( ExprShift.expr_add )
	}
	elsif match ExprShift [expr_add]
	{
		d_expr_add( ExprShift.expr_add )
	}
}

void d_expr_test( ExprTest: expr_test )
{
	if match ExprTest [expr_test Op: test_op expr_shift]
	{
		d_expr_test( ExprTest._expr_test )
		send Output [Op]
		d_expr_shift( ExprTest.expr_shift )
	}
	elsif match ExprTest [expr_shift]
	{
		d_expr_shift( ExprTest.expr_shift )
	}
}

void d_expr( Expr: expr )
{
	d_expr_test( Expr.expr_test )
}

void d_type( Type: type )
{
	if match Type "s8"
		send Output ['byte ']
	elsif match Type "s16"
		send Output ['short ']
	elsif match Type "s32"
		send Output ['int ']
	elsif match Type "s64"
		send Output ['long ']
	elsif match Type "s128"
		send Output ['long long ']
	else
		send Output [Type]
}

void d_number( Number: number )
{
	if match Number [`u `( uint `) ]
		send Output "[Number.uint]u"
	else
		send Output [Number]
}

void d_num_list( NumList: num_list )
{
	for Number: number in NumList
		send Output "[d_number( Number )], "
}

void d_stmt( Stmt: stmt )
{
	if match Stmt
		[EH: embedded_host]
	{
		send Output
			[d_embedded_host(EH)]
	}
	elsif match Stmt [Array: array] {
		send Output
			"static const [d_type(Array.type)] "
				"[Array.ident] \[\] = \[ [d_num_list( Array.num_list )] \];
	}
	elsif match Stmt [Value: value] {
		send Output
			"static const [Value.type] [Value.ident] = [Value.number];
	}
	elsif match Stmt [
			`if `( IfExpr: expr `) IfStmt: stmt
			ElseIfClauseList: else_if_clause* ElseClauseOpt: else_clause?
	] {
		send Output
			"if ( [d_expr(IfExpr)] )
			"	[d_stmt(IfStmt)]

		for ElseIfClause: else_if_clause in repeat( ElseIfClauseList ) {
			match ElseIfClause
				[`else `if `( ElseIfExpr: expr `) ElseIfStmt: stmt]

			send Output
				"else if ( [d_expr(ElseIfExpr)] )
				"	[d_stmt(ElseIfStmt)]
		}

		if ( match ElseClauseOpt ['else' ElseStmt: stmt] ) {
			send Output
				"else 
				"	[d_stmt(ElseStmt)]
		}
	}
	elsif match Stmt [`while `( WhileExpr: expr `) WhileStmt: stmt] {
		send Output
			"while ( [d_expr(WhileExpr)] )
			"	[d_stmt(WhileStmt)]
	}
	elsif match Stmt [`switch `( SwitchExpr: expr `) `{ StmtList: stmt* `}] {
		HasDefault.push( 0 )

		send Output
			"switch ( [d_expr(SwitchExpr)] ) {
			"	[d_stmt_list(StmtList)]

		if ( HasDefault.pop() == 0 ) {
			send Output
				"	default: break;
		}

		send Output
			"}
	}
	elsif match Stmt [ExprExpr: expr Semi: `;] {
		send Output
			[d_expr( ExprExpr ) Semi]
	}
	elsif match Stmt [L: `{ TL: stmt* R: `}] {
		send Output
			[L d_stmt_list( TL ) R]
	}
	elsif match Stmt [OptConst: opt_const Type: type OptPtr: opt_ptr Ident: ident OptInit: opt_init Semi: `;]
	{
		if match OptConst ['const'] {
			send Output
				"const( [d_type( Type )] )
		}
		else {
			d_type( Type )
		}

		send Output [OptPtr Ident]

		if match OptInit [E: `= expr] {
			send Output
				[E d_expr(OptInit.expr)]
		}

		send Output [Semi]
	}
	elsif match Stmt [case_block]
	{
		send Output
			"case [d_expr( Stmt.case_block.expr )]:
			"[d_stmt_list( Stmt.case_block._repeat_stmt )]
			"break;
	}
	elsif match Stmt [default_block]
	{
		send Output
			"default:
			"[d_stmt_list( Stmt.default_block._repeat_stmt )]
			"break;
		HasDefault.pop()
		HasDefault.push( 1 )
	}
	elsif match Stmt [case_label]
	{
		send Output
			"case [d_expr( Stmt.case_label.expr )]:
	}
	elsif match Stmt [export_stmt]
	{
		send Output
			"static const [d_type(Stmt.export_stmt.type)] "
					"[Stmt.export_stmt.ident] = [d_number(Stmt.export_stmt.number)];
	}
	elsif match Stmt ['fallthrough' ';']
	{
		send Output "goto case;"
	}
	elsif match Stmt [index_stmt]
	{
		send Output
			"const([d_type(Stmt.index_stmt.type)]) *[Stmt.index_stmt.ident];
	}
	elsif match Stmt [label_stmt]
	{
		send Output
			"[Stmt.label_stmt.ident]:
			"[d_stmt_list( Stmt.label_stmt._repeat_stmt )]
	}
	elsif match Stmt [entry_loop]
	{
		send Output
			[d_stmt_list( Stmt.entry_loop._repeat_stmt )]
	}
	elsif match Stmt [AS: assign_stmt]
	{
		send Output
			"[d_expr_factor2(AS.LValue) AS.assign_op d_expr(AS.expr)];
	}
	else {
		# catches unspecified cases
		send Output [Stmt]
	}
}

void d_stmt_list( StmtList: stmt* )
{
	for Stmt: stmt in repeat( StmtList )
		d_stmt( Stmt )
}


