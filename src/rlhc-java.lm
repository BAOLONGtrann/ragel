
namespace java_out
	token _IN_ /''/
	token _EX_ /''/

	lex
		token comment /
			'//' any* :> '\n' |
			'/*' any* :>> '*/'
		/

		token id
			/[a-zA-Z_][a-zA-Z_0-9]*/

		token number /
			[0-9]+
		/

		token symbol /
			'!' | '#' | '$' | '%' | '&' | '(' | ')' | '*' |
			'+' | ',' | '-' | '.' | '/' | ':' | ';' | '<' |
			'=' | '>' | '?' | '@' | '[' | ']' | '^' | '|' |
			'~' /

		literal `{ `}

		token string /
				'"' ( [^"\\] | '\\' any ) * '"' |
				"'" ( [^'\\] | '\\' any ) * "'"
			/

		ignore
			/[ \t\v\r\n]+/
	end

	def item
		[comment]
	|	[id]
	|	[number]
	|	[symbol]
	|	[string]
	|	[`{ _IN_ item* _EX_ `} ]

	def java_out
		[_IN_ _EX_ item*]
end

	

global Parser: parser<java_out::java_out>

void java_tok_list( TL: host::tok* )
{
	for Tok: host::tok in repeat(TL) {
		if match Tok [host::`${ StmtList: stmt* host::`}$] {
			send Parser
				"{
				"	[java_stmt_list( StmtList )]
				"}
		}
		elsif match Tok [host::`={ Expr: expr host::`}=]
			send Parser "([java_expr( Expr )])"
		else {
			send Parser [Tok]
		}
	}
}

void java_embedded_host( EH: embedded_host )
{
	switch EH
	case [`host `( string `, uint `) `={ TL: host::tok* host::`}=]
	{
		send Parser
			"([java_tok_list( TL )])"
	}
	case [`host `( string `, uint `) `${ TL: host::tok* host::`}$]
	{
		send Parser 
			"{
			"	[java_tok_list( TL )]
			"}
	}
	case [`host `( string `, uint `) `@{ TL: host::tok* host::`}@]
	{
		send Parser
			[java_tok_list( TL )]
	}
}

void java_expr_factor( ExprFactor: expr_factor )
{
	if match ExprFactor
		[EH: embedded_host]
	{
		send Parser
			[java_embedded_host( EH )]
	}
	elsif match ExprFactor
		[O:`( TL: expr C: `)]
	{
		send Parser
			[O java_expr(TL) C]
	}
	elsif match ExprFactor
		[ident O: `[ TL: expr C: `]]
	{
		send Parser
			[ExprFactor.ident O java_expr( TL ) C]
	}
	elsif match ExprFactor
		['offset' '(' ident ',' expr ')']
	{
		send Parser
			[java_expr( ExprFactor.expr )]
	}
	elsif match ExprFactor
		['deref' '(' ident ',' expr ')']
	{
		send Parser
			[ ExprFactor.ident '[' java_expr( ExprFactor.expr ) ']']
	}
	elsif match ExprFactor
			[T: `TRUE]
	{
		T.data = 'true'
		send Parser [T]
	}
	elsif match ExprFactor
			[F: `FALSE]
	{
		F.data = 'false'
		send Parser [F]
	}
	elsif match ExprFactor
			[N: `nil]
	{
		N.data = '0'
		send Parser [N]
	}
	elsif match ExprFactor
			[Number: number]
	{
		java_number( Number )
	}
	elsif match ExprFactor [E1: embedded_host `-> E2: expr_factor]
	{
		java_embedded_host( E1 )
		java_expr_factor( E2 )
	}
	elsif match ExprFactor [Open: `( Type: type Close: `) expr_factor]
	{
		send Parser [Open]
		java_type( Type )
		send Parser [Close]
		java_expr_factor( ExprFactor._expr_factor )
	}
	else {
		# Catches cases not specified
		send Parser [ExprFactor]
	}
}

void java_lvalue( ExprFactor: lvalue )
{
	if match ExprFactor
		[EH: embedded_host]
	{
		send Parser
			[java_embedded_host( EH )]
	}
	elsif match ExprFactor
		[ident O: `[ TL: expr C: `]]
	{
		send Parser
			[ExprFactor.ident O java_expr( TL ) C]
	}
	elsif match ExprFactor [E1: embedded_host `-> E2: lvalue]
	{
		java_embedded_host( E1 )
		java_lvalue( E2 )
	}
	else {
		# Catches cases not specified
		send Parser [ExprFactor]
	}
}

void java_expr_factor_op( ExprFactorOp: expr_factor_op )
{
	if match ExprFactorOp [B: `! expr_factor_op]
	{
		send Parser [B]
		java_expr_factor_op( ExprFactorOp._expr_factor_op )
	}
	elsif match ExprFactorOp [T: `~ expr_factor_op]
	{
		send Parser [T]
		java_expr_factor_op( ExprFactorOp._expr_factor_op )
	}
	elsif match ExprFactorOp [expr_factor]
	{
		java_expr_factor( ExprFactorOp.expr_factor )
	}
}

void java_expr_bitwise( ExprBitwise: expr_bitwise )
{
	if match ExprBitwise [expr_bitwise A: `& expr_factor_op]
	{
		java_expr_bitwise( ExprBitwise._expr_bitwise )
		send Parser [A]
		java_expr_factor_op( ExprBitwise.expr_factor_op )
	}
	elsif match ExprBitwise [expr_factor_op]
	{
		java_expr_factor_op( ExprBitwise.expr_factor_op )
	}
}

void java_expr_mult( ExprMult: expr_mult )
{
	if match ExprMult [expr_mult T: `* expr_bitwise]
	{
		java_expr_mult( ExprMult._expr_mult )
		send Parser [T]
		java_expr_bitwise( ExprMult.expr_bitwise )
	}
	elsif match ExprMult [expr_bitwise]
	{
		java_expr_bitwise( ExprMult.expr_bitwise )
	}
}

void java_expr_add( ExprAdd: expr_add )
{
	if match ExprAdd [expr_add Op: add_op expr_mult]
	{
		java_expr_add( ExprAdd._expr_add )
		send Parser [Op]
		java_expr_mult( ExprAdd.expr_mult )
	}
	elsif match ExprAdd [expr_mult]
	{
		java_expr_mult( ExprAdd.expr_mult )
	}
}

void java_expr_shift( ExprShift: expr_shift )
{
	if match ExprShift [expr_shift Op: shift_op expr_add]
	{
		java_expr_shift( ExprShift._expr_shift )
		send Parser [Op]
		java_expr_add( ExprShift.expr_add )
	}
	elsif match ExprShift [expr_add]
	{
		java_expr_add( ExprShift.expr_add )
	}
}

void java_expr_test( ExprTest: expr_test )
{
	if match ExprTest [expr_test Op: test_op expr_shift]
	{
		java_expr_test( ExprTest._expr_test )
		send Parser [Op]
		java_expr_shift( ExprTest.expr_shift )
	}
	elsif match ExprTest [expr_shift]
	{
		java_expr_shift( ExprTest.expr_shift )
	}
}

void java_expr( Expr: expr )
{
	java_expr_test( Expr.expr_test )
}

void java_type( Type: type )
{
	if match Type "s8"
		send Parser ['byte ']
	elsif match Type "s16"
		send Parser ['short ']
	elsif match Type "s32"
		send Parser ['int ']
	elsif match Type "s64"
		send Parser ['long ']
	elsif match Type "s128"
		send Parser ['long long ']
	elsif match Type "uint"
		send Parser ['int ']
	else
		send Parser [Type]
}

void java_number( Number: number )
{
	if match Number [`u `( uint `) ]
		send Parser "[Number.uint]"
	else
		send Parser [Number]
}

void java_num_list( NumList: num_list )
{
	for Number: number in NumList
		send Parser "[java_number( Number )], "
}

void java_stmt( Stmt: stmt )
{
	if match Stmt
		[EH: embedded_host]
	{
		send Parser
			[java_embedded_host( EH )]
	}
	elsif match Stmt [Array: array] {
		send Parser
			"private static [java_type(Array.type)] "
				"[Array.ident] \[\] = { [java_num_list(Array.num_list)] };
	}
	elsif match Stmt [Value: value] {
		send Parser
			"private static [Value.type] [Value.ident] = [Value.number];
	}
	elsif match Stmt [
			'if' O: `( IfExpr: expr C: `) IfStmt: stmt
			ElseIfClauseList: else_if_clause* ElseClauseOpt: else_clause?
	] {
		send Parser
			"if ( [java_expr(IfExpr)] )
			"	[java_stmt(IfStmt)]

		for ElseIfClause: else_if_clause in repeat( ElseIfClauseList ) {
			match ElseIfClause
				['else if (' ElseIfExpr: expr ')' ElseIfStmt: stmt]

			send Parser
				"else if ( [java_expr(ElseIfExpr)] )
				"	[java_stmt(ElseIfStmt)]
		}

		if ( match ElseClauseOpt ['else' ElseStmt: stmt] ) {
			send Parser
				"else
				"	[java_stmt(ElseStmt)]
		}
	}
	elsif match Stmt ['while' '(' WhileExpr: expr ')' WhileStmt: stmt] {
		send Parser
			"while ( [java_expr(WhileExpr)] )
			"	[java_stmt(WhileStmt)]
	}
	elsif match Stmt ['switch' '(' SwitchExpr: expr ')' '{' StmtList: stmt* '}'] {
		send Parser
			"switch ( [java_expr(SwitchExpr)] ) {
			"	[java_stmt_list(StmtList)]
			"}
	}
	elsif match Stmt [ExprExpr: expr Semi: `;] {
		send Parser
			[java_expr(ExprExpr) Semi]
	}
	elsif match Stmt [L: `{ TL: stmt* R: `}] {
		send Parser
			"{
			"	[java_stmt_list(TL)]
			"}
	}
	elsif match Stmt
		[TypeList: opt_const Type: type OptPtr: opt_ptr Ident: ident OptInit: opt_init Semi: `;]
	{
		send Parser
			[TypeList java_type(Type) OptPtr Ident]

		if match OptInit [E: `= expr] {
			send Parser
				[E java_expr(OptInit.expr)]
		}

		send Parser
			[Semi]
	}
	elsif match Stmt [Export: export_stmt]
	{
		send Parser
			"static final char [Export.ident] = [java_number(Export.number)];
	}
	elsif match Stmt ['fallthrough' ';']
	{
		# Nothing needed here.
	}
	elsif match Stmt [Index: index_stmt]
	{
		send Parser
			"int [Index.ident];
	}
	elsif match Stmt [case_block]
	{
		send Parser
			"case [java_expr( Stmt.case_block.expr )]:
			"[java_stmt_list( Stmt.case_block._repeat_stmt )]
			"break;
	}
	elsif match Stmt [default_block]
	{
		send Parser
			"default:
			"[java_stmt_list( Stmt.default_block._repeat_stmt )]
			"break;
	}
	elsif match Stmt [goto_label]
	{
		send Parser "{}"
	}
	elsif match Stmt [G: goto_stmt]
	{
		send Parser
			"{
			"	_goto_targ = [$G.Id];
			"	if (true)
			"		continue _goto;
			"}
	}
	elsif match Stmt [entry_loop]
	{
		send Parser
			"int _goto_targ = 0;
			"_goto: while ( true ) {
			"	switch ( _goto_targ ) {
			"	case 0:
			"	[java_stmt_list( Stmt.entry_loop._repeat_stmt )]
			"	}
			"	break;
			"}
	}
	elsif match Stmt [label_stmt]
	{
		send Parser
			"case [Stmt.label_stmt.Id]:
			"[java_stmt_list( Stmt.label_stmt._repeat_stmt )]
	}
	elsif match Stmt [AS: assign_stmt]
	{
		send Parser
			"[java_lvalue(AS.LValue) AS.assign_op java_expr(AS.expr)];
	}
	else {
		# catches unspecified cases
		send Parser [Stmt]
	}
}

void java_stmt_list( StmtList: stmt* )
{
	for Stmt: stmt in repeat( StmtList )
		java_stmt( Stmt )
}

void java_trans( StmtList: stmt* )
{
	Parser = new parser<java_out::java_out>()

	java_stmt_list( StmtList )

	JO: java_out::java_out = Parser->finish()

	if JO {
		send Output
			[JO]
	}
	else {
		send stderr
			"failed to parse output"
	}
}
