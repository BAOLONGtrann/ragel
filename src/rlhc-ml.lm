void ml_tok_list( TL: host::tok* )
{
	for Tok: host::tok in repeat(TL) {
		if match Tok [host::`${ StmtList: stmt* host::`}$]
			send Output "{[ml_stmt_list( StmtList )]}"
		elsif match Tok [host::`={ Expr: expr host::`}=]
			send Output "([ml_expr( Expr )])"
		else {
			send Output [Tok]
		}
	}
}

void ml_expr_factor( ExprFactor: expr_factor )
{
	if match ExprFactor
		[`host `( string `, uint `) `={ TL: host::tok* host::`}=]
	{
		send Output
			"([ml_tok_list( TL )])"
	}
	elsif match ExprFactor
		[`host `( string `, uint `) `${ TL: host::tok* host::`}$]
	{
		send Output 
			"{[ml_tok_list( TL )]}
	}
	elsif match ExprFactor
		[`host `( string `, uint `) `@{ TL: host::tok* host::`}@]
	{
		send Output
			[ml_tok_list( TL )]
	}
	elsif match ExprFactor
		[O:`( TL: expr C: `)]
	{
		send Output
			[O ml_expr(TL) C]
	}
	elsif match ExprFactor
		[ident O: `[ TL: expr C: `]]
	{
		send Output
			[ExprFactor.ident O ml_expr( TL ) C]
	}
	elsif match ExprFactor
		['offset' '(' ident ',' expr ')']
	{
		send Output
			[ExprFactor.ident ' + ' ml_expr( ExprFactor.expr )]
	}
	elsif match ExprFactor
		['deref' '(' ident ',' expr ')']
	{
		send Output
			"(*( [ml_expr(ExprFactor.expr)] ))
	}
	elsif match ExprFactor
			[T: `TRUE]
	{
		T.data = '1'
		send Output [T]
	}
	elsif match ExprFactor
			[F: `FALSE]
	{
		F.data = '0'
		send Output [F]
	}
	elsif match ExprFactor
			[N: `nil]
	{
		N.data = '0'
		send Output [N]
	}
	elsif match ExprFactor
			[Number: number]
	{
		ml_number( Number )
	}
	else {
		# Catches cases not specified
		send Output [ExprFactor]
	}
}

void ml_expr_ptr( ExprPtr: expr_ptr )
{
	if match ExprPtr [expr_ptr Arrow: `-> expr_factor]
	{
		# The accessor operator is contained wihtin the lhs.
		ml_expr_ptr( ExprPtr._expr_ptr )
		ml_expr_factor( ExprPtr.expr_factor )
	}
	elsif match ExprPtr [Open: `( Type: type Close: `) expr_ptr]
	{
		send Output [Open]
		ml_type( Type )
		send Output [Close]
		ml_expr_ptr( ExprPtr._expr_ptr )
	}
	elsif match ExprPtr [expr_factor]
	{
		ml_expr_factor( ExprPtr.expr_factor )
	}
	else {
		send Output [ExprPtr]
	}
}

void ml_expr_factor_op( ExprFactorOp: expr_factor_op )
{
	if match ExprFactorOp [B: `! expr_factor_op]
	{
		send Output [B]
		ml_expr_factor_op( ExprFactorOp._expr_factor_op )
	}
	elsif match ExprFactorOp [T: `~ expr_factor_op]
	{
		send Output [T]
		ml_expr_factor_op( ExprFactorOp._expr_factor_op )
	}
	elsif match ExprFactorOp [expr_ptr]
	{
		ml_expr_ptr( ExprFactorOp.expr_ptr )
	}
}

void ml_expr_bitwise( ExprBitwise: expr_bitwise )
{
	if match ExprBitwise [expr_bitwise A: `& expr_factor_op]
	{
		ml_expr_bitwise( ExprBitwise._expr_bitwise )
		send Output [A]
		ml_expr_factor_op( ExprBitwise.expr_factor_op )
	}
	elsif match ExprBitwise [expr_factor_op]
	{
		ml_expr_factor_op( ExprBitwise.expr_factor_op )
	}
}

void ml_expr_mult( ExprMult: expr_mult )
{
	if match ExprMult [expr_mult T: `* expr_bitwise]
	{
		ml_expr_mult( ExprMult._expr_mult )
		send Output [T]
		ml_expr_bitwise( ExprMult.expr_bitwise )
	}
	elsif match ExprMult [expr_bitwise]
	{
		ml_expr_bitwise( ExprMult.expr_bitwise )
	}
}

void ml_expr_add( ExprAdd: expr_add )
{
	if match ExprAdd [expr_add Op: add_op expr_mult]
	{
		ml_expr_add( ExprAdd._expr_add )
		send Output [Op]
		ml_expr_mult( ExprAdd.expr_mult )
	}
	elsif match ExprAdd [expr_mult]
	{
		ml_expr_mult( ExprAdd.expr_mult )
	}
}

void ml_expr_shift( ExprShift: expr_shift )
{
	if match ExprShift [expr_shift Op: shift_op expr_add]
	{
		ml_expr_shift( ExprShift._expr_shift )
		send Output [Op]
		ml_expr_add( ExprShift.expr_add )
	}
	elsif match ExprShift [expr_add]
	{
		ml_expr_add( ExprShift.expr_add )
	}
}

void ml_expr_test( ExprTest: expr_test )
{
	if match ExprTest [expr_test Op: test_op expr_shift]
	{
		ml_expr_test( ExprTest._expr_test )
		send Output [Op]
		ml_expr_shift( ExprTest.expr_shift )
	}
	elsif match ExprTest [expr_shift]
	{
		ml_expr_shift( ExprTest.expr_shift )
	}
}

void ml_expr_cond( ExprCond: expr_cond )
{
	ml_expr_test( ExprCond.expr_test )
}

void ml_expr_assign( ExprAssign: expr_assign )
{
	if match ExprAssign [expr_assign Op: assign_op expr_cond]
	{
		ml_expr_assign( ExprAssign._expr_assign )
		send Output [Op]
		ml_expr_cond( ExprAssign.expr_cond )
	}
	elsif match ExprAssign [expr_cond]
	{
		ml_expr_cond( ExprAssign.expr_cond )
	}
}

void ml_expr( Expr: expr )
{
	ml_expr_assign( Expr.expr_assign )
}

void ml_type( Type: type )
{
	if match Type "s8"
		send Output ['char ']
	elsif match Type "s16"
		send Output ['short ']
	elsif match Type "s32"
		send Output ['int ']
	elsif match Type "s64"
		send Output ['long ']
	elsif match Type "s128"
		send Output ['long long ']
	elsif match Type "uint"
		send Output ['unsigned int ']
	else
		send Output [Type]
}

void ml_number( Number: number )
{
	if match Number [`u `( uint `) ]
		send Output "[Number.uint]u"
	else
		send Output [Number]
}

void ml_num_list( NumList: num_list )
{
	for Number: number in NumList
		send Output "[ml_number( Number )]; "
}

void ml_stmt( Stmt: stmt )
{
	if match Stmt
		[`host `( string `, uint `) `={ TL: host::tok* host::`}=]
	{
		send Output
			"([ml_tok_list( TL )])"
	}
	elsif match Stmt
		[`host `( string `, uint `) `${ TL: host::tok* host::`}$]
	{
		send Output 
			"{[ml_tok_list( TL )]}
	}
	elsif match Stmt
		[`host `( string `, uint `) `@{ TL: host::tok* host::`}@]
	{
		send Output
			[ml_tok_list( TL )]
	}
	elsif match Stmt [Array: array] {
		send Output
			"let [Array.ident] : [ml_type(Array.type)] = \[|
				"	[ml_num_list(Array.num_list)]
			"|\]
	}
	elsif match Stmt [Value: value] {
		VP: value_pass = Value.value_pass
		send Output
			"let [Value.value_pass.ident] : [Value.value_pass.type] = [Value.value_pass.number]
	}
	elsif match Stmt [
			'if' O: `( IfExpr: expr C: `) IfStmt: stmt
			ElseIfClauseList: else_if_clause* ElseClauseOpt: else_clause?
	] {
		send Output
			"if ( [ml_expr(IfExpr)] )
			"	[ml_stmt(IfStmt)]

		for ElseIfClause: else_if_clause in repeat( ElseIfClauseList ) {
			match ElseIfClause
				['else if (' ElseIfExpr: expr ')' ElseIfStmt: stmt]

			send Output
				"else if ( [ml_expr(ElseIfExpr)] )
				"	[ml_stmt(ElseIfStmt)]
		}

		if ( match ElseClauseOpt ['else' ElseStmt: stmt] ) {
			send Output
				"else
				"	[ml_stmt(ElseStmt)]
		}
	}
	elsif match Stmt ['while' '(' WhileExpr: expr ')' WhileStmt: stmt] {
		send Output
			"while ( [ml_expr(WhileExpr)] )
			"	[ml_stmt(WhileStmt)]
	}
	elsif match Stmt ['switch' '(' SwitchExpr: expr ')' '{' StmtList: stmt* '}'] {
		send Output
			"switch ( [ml_expr(SwitchExpr)] ) {
			"	[ml_stmt_list(StmtList)]
			"}
	}
	elsif match Stmt [ExprExpr: expr Semi: `;] {
		send Output
			[ml_expr(ExprExpr) Semi]
	}
	elsif match Stmt [L: `{ TL: stmt* R: `}] {
		send Output
			[L ml_stmt_list(TL) R]
	}
	elsif match Stmt [TypeList: opt_const Type: type OptPtr: opt_ptr Ident: ident OptInit: opt_init Semi: `;]
	{
		send Output
			[TypeList ml_type(Type) OptPtr Ident]

		if match OptInit [E: `= expr] {
			send Output
				[E ml_expr(OptInit.expr)]
		}

		send Output
			[Semi]
	}
	elsif match Stmt [Export: export_stmt]
	{
		send Output
			"#define [Export.ident] [ml_number(Export.number)] 
	}
	elsif match Stmt ['fallthrough' ';']
	{
		# Nothing needed here.
	}
	elsif match Stmt [Index: index_stmt]
	{
		send Output
			"const [ml_type(Index.type)] *[Index.ident];
	}
	elsif match Stmt [case_block]
	{
		send Output
			"case [ml_expr( Stmt.case_block.expr )]:
			"[ml_stmt_list( Stmt.case_block._repeat_stmt )]
			"break;
	}
	elsif match Stmt [default_block]
	{
		send Output
			"default:
			"[ml_stmt_list( Stmt.default_block._repeat_stmt )]
			"break;
	}
	elsif match Stmt [case_label]
	{
		send Output
			"case [ml_expr( Stmt.case_label.expr )]:
	}
	elsif match Stmt [label_stmt]
	{
		send Output
			"[Stmt.label_stmt.ident]:
			"[ml_stmt_list( Stmt.label_stmt._repeat_stmt )]
	}
	elsif match Stmt [entry_loop]
	{
		send Output
			[ml_stmt_list( Stmt.entry_loop._repeat_stmt )]
	}
	else {
		# catches unspecified cases
		send Output [Stmt]
	}
}

void ml_stmt_list( StmtList: stmt* )
{
	for Stmt: stmt in repeat( StmtList )
		ml_stmt( Stmt )
}
