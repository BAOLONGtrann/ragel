include 'ragel.lm'
include 'host.lm'

lex
	token selectt /''/
	{
		input->push( make_token( typeid<c_select_section>, '' ) )
	}

	token c_select_section //
end

def start
	[c_select_section SectionList: host::section*]

export RagelError: str

GblImport = false
GblIncludeDepth = 0
GblTargetMachine = ""
GblSearchMachine = ""

# File name. The open is expected to succeed. It is tested before the colm
# program is called.
A: list_el<str> = argv->pop_head_el()
GblFileName = A->value

# Remaining items are include paths.
while ( argv->length > 0 ) {
	A = argv->pop_head_el()
	GblIncludePaths->push_tail_el( A )
}

Stream: stream = open( GblFileName, "r" )
reduce TopLevel start[ Stream ]
RagelError = error

#
#parse Start: start[ Stream ]
#PF: stream = open( "postfix.txt", "w" )
#print_dump( PF, Start )
#PF->close()
#
#PF = open( "postfix.txt", "r" )
#
#read_reduce TopLevel start[ PF ]
#

include 'reducer.lm'
