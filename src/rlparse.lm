include 'ragel.lm'
include 'host.lm'

lex
	token selectt /''/
	{
		input->push( make_token( typeid<c_select_section>, '' ) )
	}

	token c_select_section //
end

def start
	[c_select_section SectionList: host::section*]

def import_val
	[host::number] :Number
|	[host::string] :String

def import
	[Name: host::ident Val: import_val] :Import

export RagelTree: start
export RagelError: str
export RagelImport: import*

import* import( FileName: str, Start: start )
{
	ImportList: import* = cons import* []

	for Pref: host::section* in RagelTree { 
		if match Pref [
			"#define " Word: host::ident host::whitespace
			Number: host::number host::section*
		]
		{
			ImportList = cons import*[ Word Number ImportList ]
		}

		if match Pref [
			Word: host::ident host::whitespace
			"=" host::whitespace
			Number: host::number host::section*
		]
		{
			ImportList = cons import*[ Word Number ImportList ]
		}

		if match Pref [
			"#define " Word: host::ident host::whitespace
			String: host::string host::section*
		]
		{
			ImportList = cons import*[ Word String ImportList ]
		}

		if match Pref [
			Word: host::ident host::whitespace
			"=" host::whitespace
			String: host::string host::section*
		]
		{
			ImportList = cons import*[ Word String ImportList ]
		}
	}

	return ImportList
}

# Command.
A: list_el<str> = argv->pop_head_el()
Cmd: str = A->value

# File name. The open is expected to succeed. The open is tested before the
# colm program is called.
A = argv->pop_head_el()
FileName: str = A->value

# Language.
A = argv->pop_head_el()
Lang = A->value

GblSectionPass = false

if ( Cmd == 'import-file' ) {
	Stream: stream = open( FileName, "r" )
	RagelTree = parse start[ Stream ]
	RagelImport = import( FileName, RagelTree )
	RagelError = error
}
else if ( Cmd == 'reduce-import' ) {
	Stream: stream = open( FileName, "r" )
	reduce Import start[ Stream ]
	RagelError = error
}
else if ( Cmd == 'parse-file' ) {
	Stream: stream = open( FileName, "r" )
	RagelTree = parse start[ Stream ]
	RagelError = error
}
else if ( Cmd == 'toplevel-reduce-file' ) {
	# IncludeDepth
	A = argv->pop_head_el()
	IncludeDepth = atoi( A->value )

	# TargetMachine
	A = argv->pop_head_el()
	TargetMachine = A->value

	# SearchMachine
	A = argv->pop_head_el()
	SearchMachine = A->value

	#print "toplevel-reduce-file search for: [SearchMachine]

	Stream: stream = open( FileName, "r" )
	reduce TopLevel start[ Stream ]
	RagelError = error

	#print "toplevel-reduce-file complete
}
else if ( Cmd == 'toplevel-reduce-str' ) {
	A = argv->pop_head_el()
	Data: str = A->value
	reduce TopLevel start[ Data ]
	RagelError = error
}

include 'reducer.lm'
