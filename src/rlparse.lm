include 'ragel.lm'
include 'ragel-c.lm'
include 'ragel-ocaml.lm'
include 'ragel-ruby.lm'

lex
	token selectt /''/
	{
		if Lang == "ruby"
			input->push( make_token( typeid<ruby_selectt>, '' ) )
		elsif Lang == "ocaml"
			input->push( make_token( typeid<ocaml_selectt>, '' ) )
		else
			input->push( make_token( typeid<c_selectt>, '' ) )
	}

	token c_selectt //
	token ruby_selectt //
	token ocaml_selectt //
end


def start
	[c_selectt SectionList: c_host::section*]
|	[ruby_selectt RSectionList: ruby_host::section*]
|	[ocaml_selectt OSectionList: ocaml_host::section*]

def import_val
	[c_host::number] :Number
|	[c_host::string] :String

def import
	[Name: c_host::ident Val: import_val]

export RagelTree: start
export RagelError: str
export RagelImport: import*

# Language
A: list_el<str> = argv->pop_tail_el()
Lang = A->value

# The open is expected to succeed. The open is tested before
# the colm program is called.
A = argv->pop_tail_el()
FileName: str = A->value
Stream: stream = open( FileName, "r" )
RagelTree = parse start[ Stream ]
RagelError = error

import* import( FileName: str, Start: start )
{
	ImportList: import* = cons import* []

	for Pref: c_host::section* in RagelTree { 
		if match Pref [
			"#define " Word: c_host::ident c_host::whitespace
			Number: c_host::number c_host::section*
		]
		{
			ImportList = cons import*[ Word Number ImportList ]
		}

		if match Pref [
			Word: c_host::ident c_host::whitespace
			"=" c_host::whitespace
			Number: c_host::number c_host::section*
		]
		{
			ImportList = cons import*[ Word Number ImportList ]
		}

		if match Pref [
			"#define " Word: c_host::ident c_host::whitespace
			String: c_host::string c_host::section*
		]
		{
			ImportList = cons import*[ Word String ImportList ]
		}

		if match Pref [
			Word: c_host::ident c_host::whitespace
			"=" c_host::whitespace
			String: c_host::string c_host::section*
		]
		{
			ImportList = cons import*[ Word String ImportList ]
		}
	}

	return ImportList
}

# Extra operations.
if ( argv->length > 0 ) {
	A = argv->pop_tail_el()
	Cmd: str = A->value
	if ( Cmd == 'import' ) {
		RagelImport = import( FileName, RagelTree )
	}
}
